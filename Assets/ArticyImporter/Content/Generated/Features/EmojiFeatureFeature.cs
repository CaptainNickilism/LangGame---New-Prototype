//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Articy.Languagegamearticy;
using Articy.Unity;
using Articy.Unity.Interfaces;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;


namespace Articy.Languagegamearticy.Features
{
    
    
    [Serializable()]
    public class EmojiFeatureFeature : IArticyBaseObject, IPropertyProvider
    {
        
        [SerializeField()]
        private String mMeaning;
        
        [SerializeField()]
        private ArticyValueArticyObject mEmojiSprite = new ArticyValueArticyObject();
        
        [SerializeField()]
        private UInt64 mOwnerId;
        
        [SerializeField()]
        private UInt32 mOwnerInstanceId;
        
        public String Unresolved_Meaning
        {
            get
            {
                return mMeaning;
            }
        }
        
        /// <summary>
        /// Write here the meaning of the emoji
        /// </summary>
        public String Meaning
        {
            get
            {
                return Articy.Unity.ArticyTextExtension.Resolve(this, mMeaning);
            }
            set
            {
                var oldValue = mMeaning;
                mMeaning = value;
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "EmojiFeature.Meaning", oldValue, mMeaning);
            }
        }
        
        /// <summary>
        /// Drag emoji sprite here
        /// </summary>
        public ArticyObject EmojiSprite
        {
            get
            {
                return mEmojiSprite.GetValue();
            }
            set
            {
                var oldValue = mEmojiSprite;
                mEmojiSprite.SetValue(value);
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "EmojiFeature.EmojiSprite", oldValue.GetValue(), mEmojiSprite.GetValue());
            }
        }
        
        public UInt64 OwnerId
        {
            get
            {
                return mOwnerId;
            }
            set
            {
                mOwnerId = value;
            }
        }
        
        public UInt32 OwnerInstanceId
        {
            get
            {
                return mOwnerInstanceId;
            }
            set
            {
                mOwnerInstanceId = value;
            }
        }
        
        private void CloneProperties(object aClone, Articy.Unity.ArticyObject aFirstClassParent)
        {
            Articy.Languagegamearticy.Features.EmojiFeatureFeature newClone = ((Articy.Languagegamearticy.Features.EmojiFeatureFeature)(aClone));
            newClone.Meaning = Unresolved_Meaning;
            if ((mEmojiSprite != null))
            {
                newClone.mEmojiSprite = ((ArticyValueArticyObject)(mEmojiSprite.CloneObject(newClone, aFirstClassParent)));
            }
            newClone.OwnerId = OwnerId;
        }
        
        public object CloneObject(object aParent, Articy.Unity.ArticyObject aFirstClassParent)
        {
            Articy.Languagegamearticy.Features.EmojiFeatureFeature clone = new Articy.Languagegamearticy.Features.EmojiFeatureFeature();
            CloneProperties(clone, aFirstClassParent);
            return clone;
        }
        
        public virtual bool IsLocalizedPropertyOverwritten(string aProperty)
        {
            return false;
        }
        
        #region property provider interface
        public void setProp(string aProperty, object aValue)
        {
            if ((aProperty == "Meaning"))
            {
                Meaning = System.Convert.ToString(aValue);
                return;
            }
            if ((aProperty == "EmojiSprite"))
            {
                EmojiSprite = Articy.Unity.Interfaces.BaseScriptFragments.ObjectToModelRep(aValue);
                return;
            }
        }
        
        public Articy.Unity.Interfaces.ScriptDataProxy getProp(string aProperty)
        {
            if ((aProperty == "Meaning"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(Meaning);
            }
            if ((aProperty == "EmojiSprite"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(EmojiSprite);
            }
            return null;
        }
        #endregion
    }
}
